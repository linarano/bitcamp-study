package com.eomcs.oop.ex05.x1.upgrade1;

// 2) 계산기 기능 확장하기 방법1- 기존 코드 변경하기 
//  기능 추가:
//      - 곱하기 계산 기능을 수행
//  해결책?
//      - 기존 코드에 곱하기 기능을 추가한다.(기존코드 변경) - 가능하면 기존코드를 손대지않는게 좋음- 버그발생위험높음
public class CalculatorTest {
  public static void main(String[] args) {
    com.eomcs.oop.ex05.x1.Calculator c = new com.eomcs.oop.ex05.x1.Calculator();

    c.plus(100);//인스턴스 메소드이므로 주소를 주고 호출 ,메소드 내장변수 this에 들어갈 주소 
    c.minus(200);
    c.multiple(2);// 이 기능이 없다면 방법 1) 기존 클래스에 그 기능 추가하거나 2) test3을만들고 기존기능 복사해와서 기능추가

    System.out.println(c.result);
  }

}

//새 기능을 추가하기 위해 기존 코드를 변경하는 방식의 문제점:
//1) 새 기능을 추가하거나 변경하면서 기존 코드를 손대는 경우, 없던 오류가 발생할 수 있다. 
//2) 기존 코드에 계속 코드를 추가하다보면 코드의 덩치가 커지고 복잡해져서 유지보수가 어려워진다.
//3) 새로 추가한 기능이나 변경한 기능이 다른 프로젝트에서 필요없을 때 기존 코드에서 제거하기 힘들다.
// 왜? 이전에 만든 프로젝트에서 그 기능을 사용하고 있기 때문이다. 
//4) 기존 소스가 없으면 이 방식을 사용할 수 없다.**  - 클래스파일만 주고 소스파일을 안준 경우 
//
//이런 문제점을 해결하기 위해 나온 문법이 "상속(inheritance)"이다.
//

//이 방식을 아예 안쓰는 건 아니고 쓰기도 함. ( 예를들어 String class에 method 자바 1.5부터 도입 since : 쓰고 있는 프로그램들도 있으므로, 남겨두되 쓰지말라고 표시함 deprecated ,취소선)

